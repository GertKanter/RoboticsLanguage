
{% set head %}

{% if code|xpaths('//fsm:machine', {'fsm':'fsm'})|length > 0 %}
<!-- VisJS for easy diagrams -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" />
{% endif %}

{% endset %}

{% set body %}


{% if code|xpaths('//fsm:machine', {'fsm':'fsm'})|length > 0 %}

  <h1>Finite State Machine</h1>


    <div class="ui styled accordion">


  {% for machine in code|xpaths('//fsm:machine', {'fsm':'fsm'}) -%}

  {# get the list of states from the code #}
  {% set machine_name = machine|xpath('fsm:name/text()', {'fsm':'fsm'})-%}
  {% set initial_state = machine|xpath('fsm:initial/text()', {'fsm':'fsm'}) -%}
  {% set begin_states = machine|xpaths('fsm:transitions/fsm:transition/fsm:begin/text()', {'fsm':'fsm'}) -%}
  {% set end_states = machine|xpaths('fsm:transitions/fsm:transition/fsm:end/text()', {'fsm':'fsm'}) -%}
  {% set states = ([initial_state] + begin_states + end_states)|unique|list %}
  {% set index_states = {} %}
  {% for state in states %}
    {% set x = index_states.__setitem__(state, loop.index) %}
  {% endfor %}


  <div class="title">
    <i class="dropdown icon"></i> {{machine_name}}
  </div>
  <div class="content hidden">
    <div id="fsm_{{machine_name}}"></div>
  </div>

    <style type="text/css">
        #fsm_{{machine_name}} {
          width: 600px;
          height: 400px;
        }
      </style>

    <script type="text/javascript">
      // create an array with nodes
      var nodes_{{machine_name}} = new vis.DataSet([

      {% for state in states %}
        {id: {{loop.index}}, label: '{{state}}', color: {background:'white', border:'black'}},
      {% endfor %}

      ]);

      // create an array with edges
      var edges_{{machine_name}} = new vis.DataSet([

        {% set transitions = machine|xpath('fsm:transitions', {'fsm':'fsm'}) -%}
        {% for transition in transitions|xpaths('fsm:transition', {'fsm':'fsm'}) -%}
        {from: {{index_states[transition|xpath('fsm:begin/text()', {'fsm':'fsm'})]}},
         to: {{index_states[transition|xpath('fsm:end/text()', {'fsm':'fsm'})]}},
         label: "{{transition|xpath('fsm:label/text()', {'fsm':'fsm'})}}",
         arrows:'to',
         color:'#FFFFFF'
        },
        {% endfor -%}


      ]);

      // create a network
      var container_{{machine_name}} = document.getElementById('fsm_{{machine_name}}');
      var data_{{machine_name}} = {
        nodes: nodes_{{machine_name}},
        edges: edges_{{machine_name}}
      };
      var options_{{machine_name}} = {};
      var network_{{machine_name}} = new vis.Network(container_{{machine_name}}, data_{{machine_name}}, options_{{machine_name}});
      network_{{machine_name}}.setSize(300,300);
      network_{{machine_name}}.moveTo({position: {x: 300, y: 300}});
    </script>


{#      // Transitions
    {% set transitions = machine|xpath('fsm:transitions', {'fsm':'fsm'}) -%}
    {% for transition in transitions|xpaths('fsm:transition', {'fsm':'fsm'}) -%}
      {{machine_name}}.addTransition("{{transition|xpath('fsm:label/text()', {'fsm':'fsm'})}}","{{transition|xpath('fsm:begin/text()', {'fsm':'fsm'})}}","{{transition|xpath('fsm:end/text()', {'fsm':'fsm'})}}");
    {% endfor -%}

      // Initial state
      {{machine_name}}.setInitialState("{{machine|xpath('fsm:initial/text()', {'fsm':'fsm'})}}");
#}
  {% endfor -%}








{#
  <div id="mynetwork"></div>
  <div class="ui grid">
    <div class="six column row">
      {% for state in list_of_states %}
        <div class="column"><button class="fluid ui mini toggle button" id="{{state}}" onclick="highlight('{{state}}') ">Highlight {{state}}</button></div>
      {% endfor %}
    </div>
  </div>


  <script type="text/javascript">
    // create an array with nodes
    var id = 0;
    var nodes = new vis.DataSet([
    ]);

    // create an array with edges
    var edges = new vis.DataSet([
    ]);

    // create a network
    var container = document.getElementById('mynetwork');

    // provide the data in the vis format
    var data = {
        nodes: nodes,
        edges: edges
    };
    var options = {
      edges:{
        arrows: 'to',
        color:{
            highlight : 'green',
                    },
        font: '12px arial #ff0000',
        scaling:{
          label: false,
        },
        shadow: true,
        smooth: true,
      },
      layout:{randomSeed:1},
      nodes:{
        color: {
          highlight: {
            background: '#00ff00'
            },
        },
      },
    };

    function addState (idNum, labelName)
    {
      nodes.add([{id: idNum, label: labelName}]);
    }

    function addTransition (lbl, src, dst)
    {
      edges.add([{from: src, to: dst, label: lbl ,font: {align: 'middle'}}]);
    }
    function highlight (id)
    {
      network.selectNodes([id], true);
    }

    var iter = 1;
    {% for state in list_of_states %}
      addState ("{{state}}", "{{state}}");
    {% endfor %}

    {% for elem in range(num_of_transitions) %}
        addTransition ("{{transition_labels[elem]}}", "{{transition_begins[elem]}}","{{transition_ends[elem]}}")
    {% endfor %}

    console.log(data);

    var network = new vis.Network(container, data, options);
    //Set initial state
    highlight("{{init[0]}}")


  </script>
#}
{% endif %}

{% endset %}
