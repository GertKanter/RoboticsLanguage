


{% set head %}

<!-- Ros bridge -->
<script type="text/javascript" src="https://static.robotwebtools.org/roslibjs/current/roslib.min.js"></script>

<!-- dygraphs -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/dygraph/2.1.0/dygraph.min.js"></script>
<link rel="stylesheet" type="text/css" src="https://cdnjs.cloudflare.com/ajax/libs/dygraph/2.1.0/dygraph.min.css" />


<script type="text/javascript" type="text/javascript">


    var max_string_length = 10;

    // Connecting to ROS
    // -----------------
    var ros = new ROSLIB.Ros({
      url: 'ws://localhost:9090' // this is the standard rosbridge port
    });

    ros.on('connection', function() {
      console.log('Connected to websocket server.');
    });

    // Displays a message in case conection failed
    ros.on('error', function(error) {
      $('#ros_bridge').transition('show');
      $('#ros_bridge_header').html('Error connecting to websocket server: ' + error);
      console.log('Error connecting to websocket server: ', error);
    });

    // Displays a message when connection ends
    ros.on('close', function() {
      $('#ros_bridge').transition('show');
      $('#ros_bridge_header').html('Connection to websocket server closed!');
      console.log('Connection to websocket server closed.');
    });


    // // Subscribing and publishing to a topics
    // // ----------------------
    //
    // // a subscriber
    // var subscriber_echo = new ROSLIB.Topic({
    //   ros: ros,
    //   name: '/webguis/example/response',
    //   messageType: 'std_msgs/String',
    //   // latch: true
    // });
    //
    // // a publisher
    // var publisher_echo = new ROSLIB.Topic({
    //   ros: ros,
    //   name: '/webguis/example/question',
    //   messageType: 'std_msgs/String',
    //   // latch: true
    // });



    // // Callback functions for subscribers
    // // ------------------
    // subscriber_echo.subscribe(function(message) {
    //
    //   // fill in the respose field
    //   $('#response').html(message.data);
    //
    // });
    //
    // // Helping functions for publishing
    // // ------------------
    // function publishMessage()
    // {
    //   // read the value of the input field
    //   text = $('#echo').val()
    //
    //   // create a string ROS message
    //   var str = new ROSLIB.Message({
    //     data : text
    //   });
    //
    //   // publish
    //   publisher_echo.publish(str)
    // }


    // dictionary of plots for numeric type signals
    var plots = {
      {% for topic in parameters|dpath('/Transformers/ROS/topicDefinitions') %}
        {% if 'std_msgs::Float' in topic['ros_type'] or 'std_msgs::Integer' in topic['ros_type'] %}
            '{{topic['topic_name']|underscore}}':false,
        {% endif %}
      {% endfor %}
    };

    // data buffer for all topics
    var data = {
      {% for topic in parameters|dpath('/Transformers/ROS/topicDefinitions') %}
          '{{topic['topic_name']|underscore}}':[],
      {% endfor %}
    };

    // after page loads
    $(function() {

      // remember initial time
      var initial_time = Date.now();

      // activate the accordion list
      $('.ui.accordion').accordion({
          onOpen: function () {
            if (plots[this.id] == false)
            {
              // create plot the first time the accordion is open
              plots[this.id] = new Dygraph(
                      document.getElementById("plot_" + this.id),
                      data[this.id], {
                        labels: ['time', this.id],
                      });
            }
          }
      });

      {% for topic in parameters|dpath('/Transformers/ROS/topicDefinitions') %}
      // ROS definitions

      // connect to topic
      var topic_{{topic['topic_name']|underscore}} = new ROSLIB.Topic({
        ros: ros,
        name: '{{topic['topic_name']}}',
        messageType: '{{topic['ros_type']|replace('::','/')}}',
      });

      // publish function
      $('#publish_button_{{topic['topic_name']|underscore}}').click(
        function() {

          // create a ROS message
          var message = new ROSLIB.Message({
            {% if 'std_msgs::Float' in topic['ros_type'] or 'std_msgs::Integer' in topic['ros_type'] %}
              data : parseFloat($('#input_{{topic['topic_name']|underscore}}').val())
            {% else %}
              data : $('#input_{{topic['topic_name']|underscore}}').val()
            {% endif %}
          });

          // publish
          topic_{{topic['topic_name']|underscore}}.publish(message)
        }
      )

      // subscribe function
      topic_{{topic['topic_name']|underscore}}.subscribe(function(message) {

        {% if 'std_msgs::Float' in topic['ros_type'] or 'std_msgs::Integer' in topic['ros_type'] %}
        // numeric type

        // prepare the data
        now = (Date.now() - initial_time) / 1000;
        sample = [now, message.data];
        data['{{topic['topic_name']|underscore}}'].push(sample);
        options = {'file': data['{{topic['topic_name']|underscore}}'] , 'dateWindow': [now - 15, now]};

        // update value
        $('#value_{{topic['topic_name']|underscore}}').html(message.data);

        // update plot
        plots['{{topic['topic_name']|underscore}}'].updateOptions(options);
        {% endif %}

        {% if topic['ros_type'] == 'std_msgs::String' %}

        // trim text if necessary
        if (message.data.length > max_string_length)
        {
          var message = message.data.substring(0, max_string_length) + ' ...';
        }
        else
        {
          var message = message.data;
        }
        // update value
        $('#value_{{topic['topic_name']|underscore}}').html(message);


        // string type
          $('#string_{{topic['topic_name']|underscore}}').html($('#string_{{topic['topic_name']|underscore}}').html() + '\n' + message.data)
        {% endif %}

      });
      {% endfor %}
    });
</script>

{% endset %}

{% set body %}

  <!-- This part is hidden from view unless there is an error connecting to rosbridge.
      Please do not change this part -->
  <div class="ui icon error big message hidden" id="ros_bridge">
    <i class="warning circle icon"></i>
    <div class="content" >
      <div class="header" id="ros_bridge_header">

      </div>
      <p id="ros_bridge_text">
      Please make sure that you run "<code>roslaunch rosbridge_server rosbridge_websocket.launch</code>" in the terminal. Then refresh this page.</p>
    </div>
  </div>

  {% if parameters|dpath('/Transformers/ROS/topicDefinitions')|length > 0 %}
  <h2>List of ROS topics</h2>

  <div class="ui styled accordion">
  {% for topic in parameters|dpath('/Transformers/ROS/topicDefinitions') %}


    <div class="title">
      <i class="dropdown icon"></i> {{topic['topic_name']}}
    </div>
    <div class="content hidden" id='{{topic['topic_name']|underscore}}'>

<div class="ui segment">
      <div class="ui labeled button" tabindex="0">
        <div class="ui button">
          Value
        </div>
        <a class="ui basic label" id="value_{{topic['topic_name']|underscore}}">
        </a>
      </div>

      <div class="ui labeled button" tabindex="0">
        <div class="ui button">
          Type
        </div>
        <a class="ui basic label" id="value_{{topic['topic_name']|underscore}}">
          {{topic['ros_type']}}
        </a>
      </div>

      <div class="ui labeled button" tabindex="0">
        <div class="ui button">
          Flow
        </div>
        <a class="ui basic label" id="value_{{topic['topic_name']|underscore}}">
          {{topic['flow']}}
        </a>
      </div>

</div>
<!-- <div class="ui small statistics">
  <div class="statistic">
    <div class="value" id="value_{{topic['topic_name']|underscore}}">34.5</div>
    <div class="label">Value</div>
  </div>
  <div class="statistic">
    <div class="text value">{{topic['ros_type']}}</div>
    <div class="label">Type</div>
  </div>
  <div class="statistic">
    <div class="text value">{{topic['flow']}}
    </div>
    <div class="label">Flow</div>
  </div>
</div>
 -->


      <!-- <table class="ui table">
        <tr><td>Value</td><td><h2 id="value_{{topic['topic_name']|underscore}}"></h2></td></tr>
        <tr><td>Type</td><td>{{topic['ros_type']}}</td></tr>
        <tr><td>Flow</td><td>{{topic['flow']}}</td></tr>
      </table> -->

      {% if topic['ros_type'] == 'std_msgs::String' %}
        <!-- string topics  -->
        <div class="ui form">
          <div class="field">
            <label>History</label>
            <textarea readonly id="string_{{topic['topic_name']|underscore}}"></textarea>
          </div>
        </div>

        <div class="ui action input">
          <input type="text" placeholder="publish" id="input_{{topic['topic_name']|underscore}}">
          <button class="ui button" id="publish_button_{{topic['topic_name']|underscore}}">publish</button>
        </div>
      {% endif %}

      {% if 'std_msgs::Float' in topic['ros_type'] or 'std_msgs::Integer' in topic['ros_type'] %}
        <!-- numeric topic  -->
        <div class="ui segment">
          <div id="plot_{{topic['topic_name']|underscore}}"></div>
        </div>

        <div class="ui action input">
          <input type="text" placeholder="publish" id="input_{{topic['topic_name']|underscore}}">
          <button class="ui button" id="publish_button_{{topic['topic_name']|underscore}}">publish</button>
        </div>
      {% endif %}
    </div>

  {% endfor %}
  </div>

  {% endif %}

{% endset %}
