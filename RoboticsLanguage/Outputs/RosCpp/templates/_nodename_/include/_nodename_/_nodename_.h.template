/*
 * Node name: {{parameters['node']['name']}}
 *
 * Generated on: {{"%d %B, %Y"|todaysDate}}
 *       Author: {{parameters['Information']['user']['name']}}
 *      Licence: {{parameters['Information']['software']['license']}}
 *    Copyright: {{parameters['Information']['software']['copyright']}}
 *
 *    THIS FILE WAS AUTOMATICALLY GENERATED USING THE ROBOTICS LANGUAGE
 *
 */
#ifndef {{parameters['node']['name']|underscoreFullCaps}}_{{parameters['node']['name']|underscoreFullCaps}}_H
#define {{parameters['node']['name']|underscoreFullCaps}}_{{parameters['node']['name']|underscoreFullCaps}}_H

// Base libraries
#include <ros/ros.h>
#include <tuple>

// extra global includes
{% for library in parameters['Outputs']['RosCpp']['globalIncludes'] -%}
#include <{{library}}>
{% endfor -%}


/***************************************************************************************
*       {{parameters['node']['name']|camelCase }}Class Declaration
****************************************************************************************/
namespace {{parameters['node']['name']|underscore}}
{
  class {{parameters['node']['name']|camelCase }}Class
  {
    public:

      // Constructor
      {{parameters['node']['name']|camelCase }}Class();

      /*!
       * @brief Spins the node (checks for ros callbacks)
       */
      void spin();

      /*!
       * @brief initialise initializes anything needed for this node
       */
      virtual void initialise();

      /*!
       * @brief finalise the last code to run before node stops
       */
      virtual void finalise();

    private:

      // The ROS node handle
      ros::NodeHandle nh_; /**< "Global" NodeHandle */

      /* definitions */
      {{code|xpath('/node')|option('definitions')|attribute('RosCpp')}};

      {% if parameters['Transformers']['ROS']['topicDefinitions']|length > 0 -%}
      /* ROS topics */
        {% for topic in parameters['Transformers']['ROS']['topicDefinitions'] -%}
          {% if topic['flow'] == 'outgoing' or topic['flow'] == 'bidirectional' -%}
      ros::Publisher {{topic['variable']}}_publisher;
          {% endif -%}

          {% if topic['flow'] == 'incoming' or topic['flow'] == 'bidirectional' -%}
      ros::Subscriber {{topic['variable']}}_subscriber;
      void signal_{{topic['variable']}}_callback(const {{topic['topic_type']}}& message);
          {% endif -%}

      {{topic['topic_type']}} {{topic['variable']}};
        {% endfor -%}
      {% endif -%}
  };
}

#endif // {{parameters['node']['name']|underscoreFullCaps }}_{{parameters['node']['name']|underscoreFullCaps }}_H
