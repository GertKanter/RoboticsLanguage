/*
 * Node name: {{parameters['node']['name']}}
 *
 * Generated on: {{"%d %B, %Y"|todaysDate}}
 *       Author: {{parameters['Information']['user']['name']}}
 *      Licence: {{parameters['Information']['software']['license']}}
 *    Copyright: {{parameters['Information']['software']['copyright']}}
 *
 *    THIS FILE WAS AUTOMATICALLY GENERATED USING THE ROBOTICS LANGUAGE
 *
 */

#include "{{parameters['node']['name']|underscore}}/{{parameters['node']['name']|underscore}}.h"

/***************************************************************************************
*       {{parameters['node']['name']|camelCase}}Class Definition
****************************************************************************************/
namespace {{parameters['node']['name']|underscore}}
{

  /******************************* constructor *****************************************/
  {{parameters['node']['name']|camelCase}}Class::{{parameters['node']['name']|camelCase}}Class():
    nh_("~")
  {
  }


  /******************************* initialise ********************************************/
  void {{parameters['node']['name']|camelCase}}Class::initialise()
  {
    {# ROS TOPICS #################################### #}
    {% if parameters['Transformers']['ROS']['topicDefinitions']|length > 0 -%}
    /* ROS topics */
      {% for topic in parameters['Transformers']['ROS']['topicDefinitions'] -%}
    /* signal {{topic['variable']}} */
      {# PUBLISHER #################################### #}
        {% if topic['flow'] == 'outgoing' or topic['flow'] == 'bidirectional' -%}
    {{topic['variable']}}_publisher = nh_.advertise<{{topic['ros_type']}}>("{{topic['topic_name']}}",10);
        {% endif -%}

        {# SUBSCRIBER #################################### #}
        {% if topic['flow'] == 'incoming' or topic['flow'] == 'bidirectional' -%}
    {{topic['variable']}}_subscriber = nh_.subscribe("{{topic['topic_name']}}", 10, &{{parameters['node']['name']|camelCase}}Class::signal_{{topic['variable']}}_callback, this);
        {% endif -%}

      {% endfor %}
    {% endif -%}

    /* initialisation */
    {{code|xpath('/node')|option('initialise')|attribute('RosCpp')}};
  }

  /******************************* finalise ********************************************/
  void {{parameters['node']['name']|camelCase}}Class::finalise()
  {
    {{code|xpath('/node')|option('finalise')|attribute('RosCpp')}};
  }

  /******************************* spin ************************************************/
  void {{parameters['node']['name']|camelCase}}Class::spin()
  {
    // Sets the spin rate
    ros::Rate r({{code|xpath('/node')|option('rate')|attribute('RosCpp')}});
    while(ros::ok())
    {
      ros::spinOnce();
      r.sleep();
    }
  }

  {# FUNCTIONS #################################### #}
  {% for function in code|xpaths('/node/option[@name="definitions"]//function_definition') -%}
  /******************************* {{function|attribute('name')}} ************************************************/
  {% set returns = function|xpaths('function_returns/@RosCpp')|first -%}
  {% set arguments = (function|xpaths('function_arguments/element/@RosCpp'))+(function|xpaths('function_arguments/*/element/@RosCpp')) -%}
  {% if returns|length==0 %}void{% else %}{{returns}}{% endif %} {{parameters['node']['name']|camelCase}}Class::{{function|attribute('name')}}({% if arguments|length==0 %}void{% else %}{{arguments|join(", ")}}{% endif %})
  {
    {{function|xpaths('function_content/@RosCpp')|first}};
  }
  {% endfor -%}

  {# ROS TOPICS #################################### #}
  {% if parameters['Transformers']['ROS']['topicDefinitions']|length > 0 -%}
    /* Callbacks for signals */
    {% for topic in parameters['Transformers']['ROS']['topicDefinitions'] -%}
    {# CALLBACK #################################### #}
      {% if topic['flow'] == 'incoming' or topic['flow'] == 'bidirectional' -%}
      /******************************* signal_{{topic['variable']}}_callback ************************************************/
     void {{parameters['node']['name']|camelCase}}Class::signal_{{topic['variable']}}_callback(const {{topic['ros_type']}}& message)
     {
       {# Get serialised code #}
       {% set onChange = code|xpath('//Signals[@ROSvariable="' + topic['variable'] + '"]')|option('onChange')|attribute('RosCpp') %}
       {% set onNew = code|xpath('//Signals[@ROSvariable="' + topic['variable'] + '"]')|option('onNew')|attribute('RosCpp') %}

       {% if onChange|length > 0 -%}
       /* remember the last value for the topic */
       {{topic['ros_type']}} previous = {{topic['variable']}};
       {% endif -%}

       /* Cache a copy of this signal inside the class */
       {{topic['variable']}} = message;

       {% if onChange|length > 0 -%}
       if (previous.data != message.data)
       {
         /* on change */
         {{onChange}};
       }
       {% endif -%}

       /* on new */
       {{onNew}};

     };
      {% endif -%}



    {% endfor -%}
  {% endif -%}



}

/****************************************************************************************
* The Main
*****************************************************************************************/
int main(int argc, char **argv)
{
  // Initialize the node
  ros::init(argc, argv, "{{parameters['node']['name']|underscore}}");

  // Create the node object
  {{parameters['node']['name']|underscore}}::{{parameters['node']['name']|camelCase}}Class instance;

  // initialise
  instance.initialise();

  // Spin the node
  instance.spin();

  // finalise
  instance.finalise();

  return 0;
}
