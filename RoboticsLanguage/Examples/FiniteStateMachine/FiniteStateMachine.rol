# A finite state machine
node(
  name:'example state machine',
  rate:10,
  definitions: block(

    # a mini-language: code is defined within `<{ }>`
    FiniteStateMachine<{

        name:machine
        initial:idle


        (running) -error-> (fault) -reset-> (idle) -start-> (running) -stop-> (idle)

      }>,


      FiniteStateMachine<{

          name:test
          initial:A


          (A) -a1-> (B) -a2-> (A)

        }>,

      define entering():
        print('Transition: ', machine.lastTransition(), ', Entering: ', machine.state()),

      define exiting():
        print('Leaving: ', machine.state() ),

        define insideIdle():
          print('yeah'),


    # a fire signal
    fire ∈ Signals(Strings, rosTopic:'/fire', onNew: machine.fire(fire)),

    yeah ∈ Signals(Reals, rosTopic:'/yeah', onNew: print(yeah))

  ),

  initialise: block(

    machine.addInitFunction(entering),
    machine.addInitFunction(insideIdle,'idle'),
    machine.addExitFunction(exiting)

    )

)
